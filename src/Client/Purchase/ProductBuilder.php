<?php

declare(strict_types=1);

namespace LauLamanApps\IzettleApi\Client\Purchase;

use LauLamanApps\IzettleApi\API\Image;
use LauLamanApps\IzettleApi\API\Purchase\Product;
use LauLamanApps\IzettleApi\API\Universal\Vat;
use Money\Currency;
use Money\Money;
use Ramsey\Uuid\Uuid;
use Ramsey\Uuid\UuidInterface;

final class ProductBuilder implements ProductBuilderInterface
{
    /**
     * @return Product[]
     */
    public function buildFromArray(array $products, Currency $currency): array
    {
        $data = [];

        foreach ($products as $product) {
            $data[] = $this->build($product, $currency);
        }

        return $data;
    }

    private function build(array $product, Currency $currency): Product
    {
        return new Product(
            $this->getUuidFromKey('productUuid', $product),
            $this->getUuidFromKey('variantUuid', $product),
            $this->getFromKey('name', $product),
            $this->getFromKey('variantName', $product),
            $this->getIntFromKey('quantity', $product),
            $this->getMoneyFromKey('unitPrice', $currency, $product),
            $this->getVatFromKey('vatPercentage', $product),
            $this->getMoneyFromKey('rowTaxableAmount', $currency, $product),
            $this->getImageFromKey('imageLookupKey', $product),
            $this->getFromKey('autoGenerated', $product),
            $this->getFromKey('libraryProduct', $product)
        );
    }

    private function getFromKey($key, array $data)
    {
        if (!array_key_exists($key, $data)) {
            return null;
        }

        return $data[$key];
    }

    private function getIntFromKey(string $key, array $data): int
    {
        return (int) $this->getFromKey($key, $data);
    }

    private function getUuidFromKey(string $key, array $data): ?UuidInterface
    {
        $data = $this->getFromKey($key, $data);
        if (!is_null($data)) {
            return Uuid::fromString($data);
        }

        return $data;
    }

    private function getMoneyFromKey(string $key, Currency $currency, array $data): Money
    {
        return new Money($this->getFromKey($key, $data), $currency);
    }
    private function getVatFromKey($key, array $data): ?Vat
    {
        if (!array_key_exists($key, $data)) {
            return null;
        }
        if ($data[$key] == 0) {
            return null;
        }

        return new Vat((string)$data[$key]);
    }

    private function getImageFromKey(string $key, array $data): ?Image
    {
        $data = $this->getFromKey($key, $data);
        if (!is_null($data)) {
            return new Image($data);
        }

        return $data;
    }
}
