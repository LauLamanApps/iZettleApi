<?php

declare(strict_types=1);

namespace LauLamanApps\IzettleApi\Tests\Integration\Client;

use DateTime;
use LauLamanApps\IzettleApi\API\Purchase\AbstractPayment;
use LauLamanApps\IzettleApi\API\Purchase\Payment\CardPayment;
use LauLamanApps\IzettleApi\API\Purchase\Payment\CashPayment;
use LauLamanApps\IzettleApi\API\Purchase\Product;
use LauLamanApps\IzettleApi\API\Purchase\Purchase;
use LauLamanApps\IzettleApi\API\Purchase\PurchaseHistory;
use LauLamanApps\IzettleApi\Client\Purchase\Exception\PurchaseNotFoundException;
use LauLamanApps\IzettleApi\IzettleClientFactory;
use Ramsey\Uuid\Uuid;

/**
 * @medium
 */
final class PurchaseClientTest extends AbstractClientTest
{
    /**
     * @test
     */
    public function getPurchaseHistory(): void
    {
        $json = file_get_contents(__DIR__ . '/files/PurchaseClient/getPurchaseHistory.json');
        $data = json_decode($json, true);
        $iZettleClient = $this->getGuzzleIzettleClient(200, $json);
        $purchaseClient = IzettleClientFactory::getPurchaseClient($iZettleClient);

        $purchaseHistory = $purchaseClient->getPurchaseHistory();

        $this->assertInstanceOf(PurchaseHistory::class, $purchaseHistory);

        $index = 0;
        foreach ($purchaseHistory->getPurchases() as $purchase) {
            $this->assertPurchase($purchase, $data['purchases'][$index]);
            $index++;
        }
    }

    /**
     * @test
     */
    public function getPurchase(): void
    {
        $json = file_get_contents(__DIR__ . '/files/PurchaseClient/getPurchase.json');
        $data = json_decode($json, true);
        $iZettleClient = $this->getGuzzleIzettleClient(200, $json);
        $purchaseClient = IzettleClientFactory::getPurchaseClient($iZettleClient);

        $purchase = $purchaseClient->getPurchase(Uuid::uuid1());

        $this->assertPurchase($purchase, $data);
    }

    /**
     * @test
     */
    public function getPurchase_404ShouldThrowException(): void
    {
        $iZettleClient = $this->getGuzzleIzettleClient(404, '{"developerMessage":"XXX not found","errorType":null,"violations":[]}');
        $purchaseClient = IzettleClientFactory::getPurchaseClient($iZettleClient);

        $this->expectException(PurchaseNotFoundException::class);

        $purchaseClient->getPurchase(Uuid::uuid1());
    }

    private function assertPurchase(Purchase $purchase, $data): void
    {
        $this->assertSame($data['purchaseUUID'], $purchase->getUuid());
        $this->assertSame($data['purchaseUUID1'], (string) $purchase->getUuid1());
        $this->assertSame($data["amount"], (int) $purchase->getAmount()->getAmount());
        $this->assertSame($data["vatAmount"], (int) $purchase->getVatAmount()->getAmount());
        $this->assertSame($data["country"], $purchase->getCountry());
        $this->assertSame($data["currency"], $purchase->getAmount()->getCurrency()->getCode());
        $this->assertEquals(new DateTime($data["timestamp"]), $purchase->getTimestamp());
        $this->assertSame($data["gpsCoordinates"]['latitude'], $purchase->getCoordinates()->getLatitude());
        $this->assertSame($data["gpsCoordinates"]['longitude'], $purchase->getCoordinates()->getLongitude());
        $this->assertSame((float) $data["gpsCoordinates"]['accuracyMeters'], $purchase->getCoordinates()->getAccuracyMeters());
        $this->assertSame($data["purchaseNumber"], $purchase->getPurchaseNumber());
        $this->assertSame($data["userDisplayName"], $purchase->getUser()->getDisplayName());
        $this->assertSame($data["userId"], $purchase->getUser()->getId());
        $this->assertSame($data["organizationId"], $purchase->getOrganizationId());

        foreach ($purchase->getProducts() as $index => $product) {
            $this->assertInstanceOf(Product::class, $product);
            $this->assertSame($data["products"][$index]['quantity'], (string)$product->getQuantity());
            $this->assertSame((float) $data["products"][$index]['vatPercentage'], $product->getVatPercentage());
            $this->assertSame($data["products"][$index]['unitPrice'], (int) $product->getUnitPrice()->getAmount());
            $this->assertSame($data["products"][$index]['rowTaxableAmount'], (int) $product->getRowTaxableAmount()->getAmount());
            $this->assertSame($data["products"][$index]['name'], $product->getName());
            $this->assertSame($data["products"][$index]['variantName'], $product->getVariantName());
            $this->assertSame($data["products"][$index]['autoGenerated'], $product->isAutoGenerated());
            $this->assertSame($data["products"][$index]['libraryProduct'], $product->isLibraryProduct());
        }

        foreach ($purchase->getPayments() as $index => $payment) {
            $this->assertInstanceOf(AbstractPayment::class, $payment);
            $this->assertSame($data["payments"][$index]['uuid'], (string) $payment->getUuid());
            $this->assertSame($data["payments"][$index]['amount'], (int) $payment->getAmount()->getAmount());
            if ($payment instanceof CashPayment) {
                $this->assertSame($data['payments'][$index]['attributes']['handedAmount'], (int) $payment->getHandedAmount()->getAmount());
            }
            if ($payment instanceof CardPayment) {
                $this->assertSame($data['payments'][$index]['attributes']['cardPaymentEntryMode'], $payment->getCardPaymentEntryMode());
                $this->assertSame($data['payments'][$index]['attributes']['maskedPan'], $payment->getMaskedPan());
                $this->assertSame($data['payments'][$index]['attributes']['referenceNumber'], $payment->getReferenceNumber());
                $this->assertSame($data['payments'][$index]['attributes']['nrOfInstallments'], $payment->getNrOfInstallments());
                $this->assertSame($data['payments'][$index]['attributes']['cardType'], $payment->getCardType());
                $this->assertSame($data['payments'][$index]['attributes']['terminalVerificationResults'], $payment->getTerminalVerificationResults());
                if (array_key_exists('applicationIdentifier', $data['payments'][$index]['attributes'])) {
                    $this->assertSame($data['payments'][$index]['attributes']['applicationIdentifier'], $payment->getApplicationIdentifier());
                }
                if (array_key_exists('applicationName', $data['payments'][$index]['attributes'])) {
                    $this->assertSame($data['payments'][$index]['attributes']['applicationName'], $payment->getApplicationName());
                }
            }
        }

        $this->assertSame($data["receiptCopyAllowed"], $purchase->isReceiptCopyAllowed());
        $this->assertSame($data["published"], $purchase->getPublished());

        foreach ($purchase->getPayments() as $index => $payment) {
            $this->assertInstanceOf(AbstractPayment::class, $payment);
            $this->assertSame($data["payments"][$index]['uuid'], (string) $payment->getUuid());
            $this->assertSame($data["payments"][$index]['amount'], (int) $payment->getAmount()->getAmount());
        }

        $this->assertSame($data["refund"], $purchase->isRefund());
        $this->assertSame($data["refunded"], $purchase->isRefunded());
    }
}
