<?php

declare(strict_types=1);

namespace LauLamanApps\IzettleApi\Tests\Unit\Client\Purchase;

use LauLamanApps\IzettleApi\API\Image;
use LauLamanApps\IzettleApi\API\Purchase\Product;
use LauLamanApps\IzettleApi\Client\Purchase\ProductBuilder;
use Money\Currency;
use PHPUnit\Framework\TestCase;

/**
 * @small
 */
final class ProductBuilderTest extends TestCase
{
    /**
     * @test
     */
    public function parseArray(): void
    {
        $data = $this->getProductData();

        $builder = new ProductBuilder();

        $products = $builder->buildFromArray($data, new Currency('EUR'));

        foreach ($products as $index => $product) {
            $this->assertInstanceOf(Product::class, $product);
            $this->assertSame($data[$index]['unitPrice'], (int) $product->getUnitPrice()->getAmount());
            $this->assertSame($data[$index]['rowTaxableAmount'], (int) $product->getRowTaxableAmount()->getAmount());
            $this->assertSame($data[$index]['vatPercentage'], $product->getVatPercentage());
            $this->assertSame((int) $data[$index]['quantity'], $product->getQuantity());
            $this->assertSame($data[$index]['autoGenerated'], $product->isAutoGenerated());
            $this->assertSame($data[$index]['libraryProduct'], $product->isLibraryProduct());

            if (array_key_exists('productUuid', $data[$index])) {
                $this->assertSame($data[$index]['productUuid'], (string)$product->getProductUuid());
            }
            if (array_key_exists('variantUuid', $data[$index])) {
                $this->assertSame($data[$index]['variantUuid'], (string) $product->getVariantUuid());
            }
            if (array_key_exists('name', $data[$index])) {
                $this->assertSame($data[$index]['name'], $product->getName());
            }
            if (array_key_exists('variantName', $data[$index])) {
                $this->assertSame($data[$index]['variantName'], $product->getVariantName());
            }
            if (array_key_exists('imageLookupKey', $data[$index])) {
                $this->assertInstanceOf(Image::class, $product->getImageLookupKey());
                $this->assertSame($data[$index]['imageLookupKey'], $product->getImageLookupKey()->getFilename());
            }
        }
    }

    private function getProductData()
    {
        return [
            [
                "quantity" => "1",
                "vatPercentage" => 21.0,
                "unitPrice" => 100,
                "rowTaxableAmount" => 83,
                "autoGenerated" => false,
                "libraryProduct" => false,
            ],
            [
                "quantity" => "1",
                "productUuid" => "3b3565e0-2694-11e7-b983-c70f05a416cd",
                "variantUuid" => "56afb320-2694-11e7-b983-c70f05a416cd",
                "vatPercentage" => 0.0,
                "unitPrice" => 500,
                "rowTaxableAmount" => 500,
                "name" => "Munten",
                "variantName" => "10 munten",
                "imageLookupKey" => "Image.jpg",
                "autoGenerated" => false,
                "libraryProduct" => true,
            ],
        ];
    }
}
